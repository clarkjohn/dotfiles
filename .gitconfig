[alias]

	# Pull in remote changes for the current repository and all its submodules
	pull-all = !"git pull; git submodule foreach git pull origin master"
	ammend=commit --amend
	cl=clean -fd
	co=checkout
	s=status -s --long

	# branches
	b-new = for-each-ref --sort=committerdate refs/heads/ --format='%(HEAD) %(objectname:short);%(committerdate:relative);%(authorname);%(contents:subject);%(refname:short)' | awk -F ';' '{printf "\033[1;33m%-8.-8s \033[1;32m%-7.7s \033[1;31m%-9.9s\033[0m| %-30.30s\033[0m| \033[1;36m%-60.60s\033[0m\n", $1, $2, $3, $4, $5}';

	b = for-each-ref --sort='-authordate' --format='%(authordate)%09%(objectname:local)%09%(refname)' refs/heads #doesnt work
	b-details = for-each-ref --sort=committerdate refs/heads/ --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(color:red)%(objectname:short)%(color:reset) - %(contents:subject) - %(authorname) (%(color:green)%(committerdate:relative)%(color:reset))'
	b-unpushed = log --branches --not --remotes --simplify-by-decoration --decorate --oneline --grep='auto commit at' --invert-grep

	# stash
	st=stash -u
	stl=stash list -n 5 --format='%gd%C(cyan) %ad %Cred(%cr):%Creset %gs'
	st-files-in-stash-number="!st() { git stash show --name-only -p stash@{$1}; }; st"
	st-checkout-from-stash-number-for-file="!st() { git checkout stash@{$1} -- $2; }; st"

	# stash snapshots
	# via http://blog.apiaxle.com/post/handy-git-tips-to-stop-you-getting-fired/
	st-snapshot=!git stash save "snapshot: $(date)" && git stash apply "stash@{0}"
	st-snapshots=!git stash list --grep snapshot

	# log
	l=log -20 --no-merges --pretty=format:'%C(yellow)%h%Creset %C(cyan)%ad %Cred%<(10,trunc)%an %Creset%<(70,trunc)%s %Creset' --date=format:'%a %m-%d-%y %H:%M' --decorate #commit short history
	# include merges
	lm=log -20 --pretty=format:'%C(yellow)%h%Creset %C(cyan)%ad %Cred%<(10,trunc)%an %Creset%<(70,trunc)%s %Creset' --date=format:'%a %m-%d-%y %H:%M' --decorate #commit short history
	log-one-line-history=log --pretty=format:'%C(yellow)%h%Creset %C(cyan)%ad%Creset %s %Cred(%an)%Creset' --date=local --decorate #commit short history
	log-files-in-commit-1=log --pretty=format:'%C(yellow)%h%Creset %C(cyan)%ad %Cred%<(10,trunc)%an %Creset%<(70,trunc)%s %Creset' --date=format:'%a %m-%d-%y %H:%M' --decorate --numstat #detailed history
	log-graph-history=log --pretty=format:'%C(yellow)%h%Creset %C(cyan)%ad %Cred%<(10,trunc)%an %Creset%<(70,trunc)%s %Creset' --date=format:'%a %m-%d-%y %H:%M' --decorate --graph #commit graph historyg res
	log-recent-changes-detailed=log -p HEAD@{1}..HEAD@{0} #recent changes

	#file
	log-show-commit-history-for-file-1=log --full-history --follow --stat

	# special
	aliases = "!git config -l | grep alias | cut -c 7-" #show all aliases in config

	# list
	list-conflict=diff --name-only --diff-filter=U #list all the conflicted files
	list-all-files=ls-files -t #show all tracked files
	list-untracked-files=ls-files --others #Show all untracked files
	list-ignored-files=ls-files --others -i --exclude-standard #Show all ignored files
	list-files-in-commit=diff-tree --no-commit-id --name-only -r #require parameter
	list-duplicate-files-by-sha-and-sort-by-sha="!git ls-tree -r HEAD | cut -c 13- | sort | uniq -D -w 40"

	# Diff
	d = diff

	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
	diff-number-revisions-ago-and-current-state-1 = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

	# `git di $number` shows the diff between the state `$number` revisions ago and the current state for specific file
	diff-number-revisions-ago-and-current-state-1-for-file-2 = !"d() { git diff --patch-with-stat HEAD~$1 -- $2; }; git diff-index --quiet HEAD -- || clear; d"
	
	diff-vim=git difftool -tool=vimdiff
	
	# Find
	# Find branches containing commit
	find-branch-by-commit-1 = "!f() { git branch -a --contains $1; }; f"

	# Find tags containing commit
	find-tag-by-commit-1 = "!f() { git describe --always --contains $1; }; f"

	# Find commits by source code
	find-commit-by-source-code-1 = "!f() { git log --pretty=format:'%C(yellow)%h	%Cblue%ad	%Creset%s%Cgreen	[%cn] %Cred%d' --decorate --date=short -S$1; }; f"

	# Find commits by commit message
	find-commit-by-commit-message-1 = "!f() { git log --pretty=format:'%C(yellow)%h	%Cblue%ad	%Creset%s%Cgreen	[%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

	# grep from root folder
	find-source-by-source-code-1 = "!f() { A=$(pwd) && TOPLEVEL=$(git rev-parse --show-toplevel) && cd $TOPLEVEL && git grep --full-name -In $1 | xargs -I{} echo $TOPLEVEL/{} && cd $A; }; f"

	#list remotes
    remotes = "!git config -l | grep remote.*url | tail -n +2"

[branch]

	#When branching off a remote branch, automatically let the local branch track the remote branch
	autosetupmerge = true
	
[color]

	# Use colors in Git commands that are capable of colored output when
	# outputting to the terminal. (This is the default setting in Git â‰¥ 1.8.4.)
	ui = auto

[color "branch"]

	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]

	meta = yellow bold
	frag = magenta bold # line info
	old = red # deletions
	new = green # additions

[color "status"]

	added = yellow
	changed = green
	untracked = cyan

[commit]

	template = ~/.gitmessage

[core]

	#developement uses windows cr lf
	editor = notepad
	autocrlf = true
	eol = lf

[difftool]

	prompt = false
	
[difftool "winmerge"]

	name = WinMerge
	trustExitCode = true
	cmd = "/c/Program\\ Files\\ \\(x86\\)/WinMerge/WinMergeU.exe" -u -e $LOCAL $REMOTE

[help]

	# Automatically correct and execute mistyped commands
	autocorrect = 1

[format]

	pretty = format:%C(yellow)%h%Creset %C(cyan)%ad%Creset %s %Cred(%an)%Creset

[include]

	path = ~/.gitconfig.local	
	
[mergetool]

	prompt = false
	keepBackup = false
	keepTemporaries = false

[merge]

	tool = winmerge

	# always show a diffstat at the end of a merge
	stat = true

[mergetool "winmerge"]

	name = WinMerge
	trustExitCode = true
	cmd = "/c/Program\\ Files\\ \\(x86\\)/WinMerge/WinMergeU.exe" -u -e -dl \"Local\" -dr \"Remote\" $LOCAL $REMOTE $MERGED

[push]

	default = current

[merge "ours"]

	driver = true
	conflictstyle=diff3