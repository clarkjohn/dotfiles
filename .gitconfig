[alias]
  # Commit
  c = commit -am
  amend = commit --amend --all

  # Clean and checkout
  cl = clean -fd
  co = checkout

  # Status and diff
  s = status -s --long
  d = diff

  # Branches
  b = for-each-ref --sort=committerdate refs/heads/ --format='%(HEAD) %(color:cyan)%(refname:short)%(color:reset) - %(color:yellow)%(objectname:short)%(color:reset) - %(contents:subject) - %(color:red)%(authorname) %(color:reset)(%(color:green)%(committerdate:relative)%(color:reset))'
  b-not-pushed = log --branches --not --remotes --simplify-by-decoration --decorate --oneline --grep='auto commit at' --invert-grep
  
  # Log
  l = log --pretty=pretty-short --date=format:'%a %m-%d-%y %H:%M' --decorate -20 --no-merges
  lm = log --pretty=pretty-short --date=format:'%a %m-%d-%y %H:%M' --decorate -20
  la = log --pretty=pretty-short --date=format:'%a %m-%d-%y %H:%M' --decorate
  l-graph = log --pretty=pretty-short --date=format:'%a %m-%d-%y %H:%M' --decorate --graph
  l-stats = log --pretty=pretty-short --date=format:'%a %m-%d-%y %H:%M' --decorate --all --stat

  # Show all aliases in config
  aliases = "!git config -l | grep alias | cut -c 7-"

  # Determines if the repository uses 'main' or 'master' for its primary branch. Defaults to 'main'.
  mainormaster = !"(git branch --format '%(refname:short)' --sort=-committerdate --list master main 2>/dev/null; echo main) | head -n1 2>/dev/null || echo main"
  # Shows commit log of unique commits on the current branch that are not on the primary branch ('main' or 'master').
  diff-commitsfrommain = !"git log --no-merges origin/$(git mainormaster 2>/dev/null).. 2>/dev/null || echo 'Error: Could not determine main branch or fetch commits'"

  # List files
  list-files-conflict = diff --name-only --diff-filter=U
  list-files-all = ls-files -t
  list-files-untracked = ls-files --others
  list-files-ignored = ls-files --others -i --exclude-standard
  list-files-in-commit-1 = diff-tree --no-commit-id --name-only -r

  # List remotes and branches/tags by commit
  list-remotes = "!git config -l | grep remote.*url | tail -n +2"
  list-branch-by-commit-1 = "!f() { git branch -a --contains $1; }; f"
  list-tags-by-commit-1 = "!f() { git describe --always --contains $1; }; f"

  # List commits
  list-commit-for-file-1 = log --full-history --follow --stat
  list-commit-by-source-code-1 = "!f() { git log --pretty=pretty-short --decorate --date=short -S$1; }; f"
  list-commit-by-commit-message-1 = "!f() { git log --pretty=pretty-short --decorate --date=short --grep=$1; }; f"

[branch]
  # When branching off a remote branch, automatically set up tracking.
  autosetupmerge = true

[color]
  ui = always

[color "diff"]
  meta = yellow bold
  commit = green bold
  frag = magenta bold
  old = red bold
  new = green bold
  whitespace = red reverse

[color "diff-highlight"]
  oldNormal = red bold
  oldHighlight = "red bold 52"
  newNormal = "green bold"
  newHighlight = "green bold 22"

[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green

[color "status"]
  added = yellow
  changed = green
  untracked = cyan

[commit]
  template = ~/.gitmessage

[core]
  editor = nvim
  pager = delta # https://github.com/dandavison/delta

[interactive]
  diffFilter = delta --color-only

[delta]
  navigate = true # use n and N to move between diff sections
  true-color = always
  file-style = bold yellow ul
  file-decoration-style = yellow ol ul
  hunk-header-decoration-style = blue
  hunk-header-line-number-style = purple bold
  #side-by-side = true
  #syntax-theme = base16

[diff]
  conflictstyle = zdiff3 # for delta

[help]
  # Automatically correct and execute mistyped commands
  autocorrect = 1

[format]
  pretty = format:%C(yellow)%h%Creset %C(cyan)%ad %Cred%<(10,trunc)%an %Creset%<(70,trunc)%s %Creset

[pretty]
  pretty-short = format:%C(yellow)%h%Creset %C(cyan)%ad %Cred%<(10,trunc)%an %Creset%<(70,trunc)%s %Creset

[include]
  path = ~/.gitconfig.local

[merge]
  tool = intellij
  stat = true

[mergetool "intellij"]
  cmd = '/Applications/IntelliJ IDEA.app/Contents/macOS/idea' merge $(cd $(dirname "$LOCAL") && pwd)/$(basename "$LOCAL") $(cd $(dirname "$REMOTE") && pwd)/$(basename "$REMOTE") $(cd $(dirname "$BASE") && pwd)/$(basename "$BASE") $(cd $(dirname "$MERGED") && pwd)/$(basename "$MERGED")
  trustExitCode = true

[mergetool]
  keepBackup = false

[init]
  defaultBranch = main

[pull]
  rebase = true

[fetch]
  prune = true

[rerere]
  enabled = true

[push]
  default = current
