#!/usr/bin/env bash

# Shell prompt based on the Solarized Dark theme.
# Screenshot: http://i.imgur.com/EkEtphC.png
# Heavily inspired by @necolas’s prompt: https://github.com/necolas/dotfiles
# iTerm → Profiles → Text → use 13pt Monaco with 1.1 vertical spacing.

# --- Terminal Capabilities and Color Setup ---
# Check for 256-color support using 'infocmp' for broader compatibility.
# If gnome-256color or xterm-256color are available, set TERM accordingly.
if infocmp gnome-256color >/dev/null 2>&1; then
    export TERM='gnome-256color'
elif infocmp xterm-256color >/dev/null 2>&1; then
    export TERM='xterm-256color'
fi

# Define color variables using tput for maximum compatibility.
# Fallback to ANSI escape codes if tput is not available or fails.
if tput setaf 1 &>/dev/null; then
    tput sgr0 # reset colors
    bold=$(tput bold)
    reset=$(tput sgr0)
    # Solarized colors, taken from http://git.io/solarized-colors.
    black=$(tput setaf 0)
    blue=$(tput setaf 33)
    cyan=$(tput setaf 37)
    green=$(tput setaf 64)
    orange=$(tput setaf 166)
    purple=$(tput setaf 125)
    red=$(tput setaf 124)
    violet=$(tput setaf 61)
    white=$(tput setaf 15)
    yellow=$(tput setaf 136)
else
    bold=''
    reset="\e[0m"
    black="\e[1;30m"
    blue="\e[1;34m"
    cyan="\e[1;36m"
    green="\e[1;32m"
    orange="\e[1;33m"
    purple="\e[1;35m"
    red="\e[1;31m"
    violet="\e[1;35m"
    white="\e[1;37m"
    yellow="\e[1;33m"
fi

# --- Git Prompt Function ---
# This function displays Git repository status.
prompt_git() {
    local s=''
    local branchName=''

    # Check if the current directory is in a Git repository.
    git rev-parse --is-inside-work-tree &>/dev/null || return 0 # Use 'return 0' for explicit success

    # Determine the current branch name or commit SHA.
    branchName="$(git symbolic-ref --quiet --short HEAD 2>/dev/null || \
        git describe --all --exact-match HEAD 2>/dev/null || \
        git rev-parse --short HEAD 2>/dev/null || \
        echo '(unknown)')"

    # Early exit for Chromium & Blink repo, as the dirty check takes too long.
    # Thanks, @paulirish!
    # https://github.com/paulirish/dotfiles/blob/dd33151f/.bash_prompt#L110-L123
    local repoUrl
    repoUrl="$(git config --get remote.origin.url)"
    if [[ "${repoUrl}" == *'chromium/src.git'* ]]; then # Use globbing for pattern matching
        s+='*'
    else
        # Check for uncommitted changes in the index.
        if ! git diff --quiet --ignore-submodules --cached; then # No need for '$()' here
            s+='+'
        fi
        # Check for unstaged changes.
        if ! git diff-files --quiet --ignore-submodules --; then # No need for '$()' here
            s+='!'
        fi
        # Check for untracked files.
        if [[ -n "$(git ls-files --others --exclude-standard)" ]]; then # Use [[ ]] for string checks
            s+='?'
        fi
        # Check for stashed files.
        if git rev-parse --verify refs/stash &>/dev/null; then # No need for '$()' here
            s+='$'
        fi
    fi

    # Prepend " [" and append "]" if 's' is not empty.
    [[ -n "${s}" ]] && s=" [${s}]"

    echo -e "${1}${branchName}${2}${s}"
}

# --- Prompt Styling ---
# Highlight the user name when logged in as root.
if [[ "${USER}" == "root" ]]; then
    userStyle="${red}"
else
    userStyle="${orange}"
fi

# Highlight the hostname when connected via SSH.
if [[ -n "${SSH_TTY}" ]]; then # Check if SSH_TTY is set and not empty
    hostStyle="${bold}${red}"
else
    hostStyle="${yellow}"
fi

# --- Set the Terminal Title and Prompt (PS1) ---
# PS1: Primary prompt string.
# \[\033]0;\W\007\]: Sets the terminal title to the current working directory basename.
# \n: Newline for a multi-line prompt.
# \u: Current username.
# \h: Hostname up to the first '.'.
# \w: Current working directory (full path).
# \$(prompt_git ...): Executes the prompt_git function.
# \$: Last character of the prompt (typically '$' for regular user, '#' for root).
# \[${reset}\]: Resets colors.
PS1="\[\033]0;\W\007\]" # Working directory base name as terminal title
PS1+="\[${bold}\]\n"    # Newline
PS1+="\[${userStyle}\]\u" # Username
PS1+="\[${white}\] at "
PS1+="\[${hostStyle}\]\h" # Host
PS1+="\[${white}\] in "
PS1+="\[${green}\]\w"    # Working directory full path
# Git repository details: white ' on ' violet branch name blue status
PS1+="\$(prompt_git \"\[${white}\] on \[${violet}\]\" \"\[${blue}\]\")"
PS1+="\n"
PS1+="\[${white}\]\$ \[${reset}\]" # `$` (and reset color)
export PS1

# --- Set the Secondary Prompt (PS2) ---
# PS2: Secondary prompt string (used for multi-line commands).
PS2="\[${yellow}\]→ \[${reset}\]"
export PS2
