#!/usr/bin/env bash

# color cat
alias c='$HOME/bin/vimcat.sh'

# show colors
alias a-show-available-colors='$HOME/bin/colortest.sh'

# copy settings to local servers
# SERVERS_TO_COPY_DOTFILES should be overwritten in .extra
declare -a SERVERS_TO_COPY_DOTFILES=("placeholder1" "placeholder2")
function a-copy-dotfiles-to-servers() {
	echo $SERVERS_TO_COPY_DOTFILES
	for server in "${SERVERS_TO_COPY_DOTFILES[@]}"; do
		echo copying dotfiles over to "$server"
		ssh "$server" "mkdir -p ~/bin && mkdir -p ~/.vim/syntax && mkdir -p ~/.vim/colors"
		scp ~/.bash_profile ~/.bash_prompt.linux ~/.bashrc ~/.functions  ~/.dircolors ~/.extra ~/.gitconfig ~/.gitconfig.local ~/.gitignore ~/.inputrc ~/.vimrc "$server":~
		scp ~/.vim/colors/* "$server":~/.vim/colors
		scp ~/.vim/syntax/slf4j.vim "$server":~/.vim/syntax
		scp ~/bin/java-color-tail.pl ~/bin/vimcat.sh ~/bin/z.sh ~/bin/colortest.sh "$server":~/bin
	done;
}

# git
# wrap git, to show git exit in red
function g(){
	command git "$@"
	local exitCode=$?
	if [ $exitCode -ne 0 ]; 
	then
		printf "\033[0;31mERROR: git exited with code $exitCode\033[0m\n"
		return $exitCode
	fi
}

# save current work in a backup branch then do a HARD reset to HEAD
# based on http://stackoverflow.com/questions/1628088/how-to-reset-my-local-repository-to-be-just-like-the-remote-repository-head
function g-reset-to-origin-remove-all-commits() {
	timestamp=`date "+%Y-%m-%d-%H_%M_%S"`
	branchname=`git rev-parse --symbolic-full-name --abbrev-ref HEAD`
	read -p "backup any changes including untracked files then reset branch $branchname to origin (y/n)? "
	if [[ $REPLY =~ ^[Yy]$ ]]
	then
		echo "about to auto-commit any changes, including untracked files:"
		git status -s long
		git add .
		echo ""
		echo "autocommit files"
		git commit -a -m "auto commit at $timestamp"
		echo "now resetting to origin/$branchname"
		git fetch origin
		git reset --hard origin/$branchname
		echo "removing untracked files"
		git clean -d -f
	else
		echo "cancelled"
	fi

}

# delete local branches:
# 1) all merged to master
# 2) autocommitted branch from g-reset-to-origin-remove-all-commits() that are older than 7 days
function g-clean-branches() {
	#http://stackoverflow.com/questions/6127328/how-can-i-delete-all-git-branches-which-have-been-merged
	echo "deleting local branches merged to master, except for development branches"
	git branch --merged master | egrep -v "(^\*|master|dev|dev_1|develop)" | xargs git branch -d

	echo "deleting local auto-save branches over 7 days old"
	previous_timestamp=`date -d "7 days ago" +"%Y-%m-%d"`
	
    for branch in $(git for-each-ref --format='%(refname:short)' refs/heads/auto-save*); do
		branch_date=$(printf "$branch" | grep -Po '(?<=-at-).[0-9]+-[0-9]+-[0-9]+')
		
		if [[ "$branch_date" < "$previous_timestamp" ]];
		then
			echo "$branch is older than 7 days, deleting"
			git branch -D $branch
		fi  
	done
	
	for branch in $(git for-each-ref --format='%(refname:short)' refs/heads/auto-save-*/*); do
		branch_date=$(printf "$branch" | grep -Po '(?<=-at-).[0-9]+-[0-9]+-[0-9]+')
		
		if [[ "$branch_date" < "$previous_timestamp" ]];
		then
			echo "$branch is older than 7 days, deleting"
			git branch -D $branch
		fi  
	done		
}

function g-vim-show-1() {
	g show "$1" | vim - "+set filetype=${1##*.}";
}

alias g-find-merge-conflicts-in-files="grep -Ril '<<<<<<<\|>>>>>>>'"

# parse json value
# https://gist.github.com/cjus/1047794
# To print your values give second argument 
# curl -s -X GET http://twitter.com/users/show/$1.json | jsonValue profile_image_url 1
#
# To print all values don't give second argument
#curl -s -X GET http://twitter.com/users/show/$1.json | jsonValue profile_image_url
function jsonValue() {
	KEY=$1
	num=$2
	awk -F"[,:}]" '{for(i=1;i<=NF;i++){if($i~/'$KEY'\042/){print $(i+1)}}}' | tr -d '"' | sed -n ${num}p
}

# java logging color tail
# usage:
# tail -f *.log | jtail
# tail -f *.log -f **/*.log | jtail
alias jtail='$HOME/bin/java-color-tail.pl'

# List all files, long format, colorized, permissions in octal
# https://github.com/paulirish/dotfiles/blob/master/.functions
function la(){
	ls -l  "$@" | awk '
	{
		k=0;
		for (i=0;i<=8;i++)
		k+=((substr($1,i+2,1)~/[rwx]/) *2^(8-i));
		if (k)
			printf("%0o ",k);
			printf(" %9s  %3s %2s %5s  %6s  %s %s %s\n", $3, $6, $7, $8, $5, $9,$10, $11);
	}'
}

# maven
alias mvn='/bin/sh $HOME/bin/mvn-color.sh'
alias m='mvn $@'
alias m-code-format='mvn -e net.revelc.code:formatter-maven-plugin:0.5.2:format'
alias m-skip-tests='mvn -Dmaven.test.skip=true'

# Print each PATH entry on a separate line
alias a-path='echo -e ${PATH//:/\\n}'

# Start an HTTP server from a directory, optionally specifying the port
function a-start-http-server() {
	local port="${1:-8000}";
	sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesnâ€™t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}

# `a` with no arguments opens the current directory in Atom Editor, otherwise
# opens the given location
function a() {
	if [ $# -eq 0 ]; then
		atom .;
	else
		atom "$@";
	fi;
}

# `v` with no arguments opens the current directory in Vim, otherwise opens the
# given location
function v() {
	if [ $# -eq 0 ]; then
		vim .;
	else
		vim "$@";
	fi;
}

# open notepadd++
test -f "/c/Program Files (x86)/Notepad++/notepad++.exe" && alias n='/c/Program\ Files\ \(x86\)/Notepad++/notepad++.exe'
test -f "/c/Program Files/Notepad++/notepad++.exe" && alias n='/c/Program\ Files/Notepad++/notepad++.exe'